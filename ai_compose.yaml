#
# Run:
#   podman network create ai-network
#   export CONTAINERS_DIR=~/.containers
#   mkdir -p $CONTAINERS_DIR/ollama_data
#   mkdir -p $CONTAINERS_DIR/open-webui
#   mkdir -p $CONTAINERS_DIR/n8n_data
#   mkdir -p $CONTAINERS_DIR/postgres_data
#   mkdir -p $CONTAINERS_DIR/qdrant_data
#   podman-compose -f ai_compose.yaml up -d
#
#   sleep 10
#   open http://localhost:11434    # "Ollama is running"
#   open http://localhost:3000     # Open-WebUI
#   open http://localhost:5678     # n8b
#
version: "3.9"

volumes:
  ollama_data:
  n8n_data:
  open-webui_data:
  postgres_data:
  qdrant_data:

# networks:
#   ai_network:

services:
  ollama:
    container_name: ollama
    image: ollama/ollama:latest
    # networks: ["ai_network"]
    ports:
      - "11434:11434"
    # remove_container: true
    # remove_on_stop: true
    restart: unless-stopped
    volumes:
      # - ollama_data:/root/.ollama
      - ~/.containers/ollama_data:/root/.ollama
    environment:
      # - OLLAMA_HOST=ollama:11434
      - OLLAMA_NUM_PARALLEL=1 # Limit Concurrent requests
      - OLLAMA_MAX_LOADED_MODELS=1 # Limit simultaneous model instances:
    # entrypoint: /bin/sh
    # command:
    #   - "-c"
    #   - "sleep 3; ollama pull llama3.2:3b"

  open-webui:
    container_name: open-webui
    image: ghcr.io/open-webui/open-webui:main
    depends_on:
      - ollama
    ports:
      - "3000:8080"
    # remove_container: true
    # remove_on_stop: true
    restart: always
    volumes:
      # - open-webui:/app/backend/data
      - ~/.containers/open-webui_data:/app/backend/data
    # environment:
    # - N8N_HOST=0.0.0.0

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    depends_on:
      - ollama
    # remove_container: true
    # remove_on_stop: true
    # restart: always
    ports:
      # - "127.0.0.1:5678:5678"
      - "5678:5678"
    volumes:
      # - n8n_data:/home/node/.n8n
      - ~/.containers/n8n_data:/home/node/.n8n
      # - ~/.containers/n8n_data:/home/node
    environment:
      - N8N_DEFAULT_LOCALE=en
      - GENERIC_TIMEZONE='America/Los_Angeles'     # the timezone n8n should use, see https://momentjs.com/timezone/
      - N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES=false
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
      - N8N_HOST=localhost
      # - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_EXTERNAL_SECRETS_UPDATE_INTERVAL=300   # default: 300 (seconds)
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=true
      - N8N_PROTOCOL=https
      - N8N_HIRING_BANNER_ENABLED=true
      - N8N_BINARY_DATA_STORAGE_PATH=binaryData    # default: N8N_USER_FOLDER/binaryData
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem    # store binary data files in filesystem, not memory
      - N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES=false
      # - N8N_RESTRICT_FILE_ACCESS_TO=  # Limits access to files in these directories. Provide multiple files as a colon-separated list (":").
      # - ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      # - N8N_RUNNERS_ENABLED=true
      # - NODE_ENV=production
      # - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/

  # postgres:
  #   image: postgres:16-alpine
  #   hostname: postgres
  #   networks: ['ai_network']
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=AIisC00L
  #     - POSTGRES_DB=
  #   volumes:
  #     - ~/.containers/postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10

  # n8n-import:
  #   <<: *service-n8n
  #   hostname: n8n-import
  #   container_name: n8n-import
  #   entrypoint: /bin/sh
  #   command:
  #     - "-c"
  #     - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
  #   volumes:
  #     - ./n8n/demo-data:/demo-data
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # n8n:
  #   <<: *service-n8n
  #   hostname: n8n
  #   container_name: n8n
  #   restart: unless-stopped
  #   ports:
  #     - 5678:5678
  #   volumes:
  #     - n8n_storage:/home/node/.n8n
  #     - ./n8n/demo-data:/demo-data
  #     - ./shared:/data/shared
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     n8n-import:
  #       condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    # networks: ["ai_network"]
    # remove_container: true
    # remove_on_stop: true
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - ~/.containers/qdrant_data:/qdrant/storage

  # x-n8n: &service-n8n
  #   image: n8nio/n8n:latest
  #   networks: ['demo']
  #   environment:
  #     - DB_TYPE=postgresdb
  #     - DB_POSTGRESDB_HOST=postgres
  #     - DB_POSTGRESDB_USER=${POSTGRES_USER}
  #     - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
  #     - N8N_DIAGNOSTICS_ENABLED=false
  #     - N8N_PERSONALIZATION_ENABLED=false
  #     - N8N_ENCRYPTION_KEY
  #     - N8N_USER_MANAGEMENT_JWT_SECRET
  #     - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
  #     # - WEBHOOK_URL=
  #     # - N8N_PROTOCOL=
  #   env_file:
  #     - path: .env
  #       required: true
